@inject DialogService DialogService

<RadzenTemplateForm TItem="Appointment" Data="@model" Submit=@OnSubmit>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="内容" />
        </div>
        <div class="col">
            <RadzenTextBox @bind-Value="@model.ContentText" Name="ContentText" />
            <RadzenRequiredValidator Text="内容は必須です" Component="ContentText" />
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="開始" />
        </div>
        <div class="col">
            <RadzenDatePicker @bind-Value="@model.Start" Name="Start" ShowTime="true" />
            <RadzenRequiredValidator Text="開始は必須です" Component="Start" />
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="終了" />
        </div>
        <div class="col">
            <RadzenDatePicker Name="End" @bind-Value="@model.End" ShowTime="true" />
            <RadzenRequiredValidator Component="End" Text="終了は必須です" />
            <RadzenCustomValidator Component="End" Validator="@(() => CheckFromTo(model.Start,model.End))" Text="終了は開始より後ろ日時にしてください" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-3"></div>
        <div class="col">
            <RadzenButton ButtonType="ButtonType.Submit" Text="登録" />
        </div>
        <div class="col">
            <RadzenButton ButtonStyle="ButtonStyle.Danger" Text="削除" Click="@OnDelete" />
        </div>
    </div>
</RadzenTemplateForm>
@code {
    [Parameter]
    public Appointment Appointment { get; set; }

    Appointment model = new Appointment();

    protected override void OnParametersSet()
    {
        model = Appointment;
    }

    void OnSubmit(Appointment model)
    {
        DialogService.Close(model);
    }

    void OnDelete()
    {
        DialogService.Close(null);
    }

    bool CheckFromTo(DateTime? from, DateTime? to)
    {
        if (to == null || from == null)
        {
            return true;
        }
        return from < to;
    }
}